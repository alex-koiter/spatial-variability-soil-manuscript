{
  "hash": "65ed2f71fb63092baac328067271ecfb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lithium (Li) Forest site RF_Regression\"\nauthor: \"Alex Koiter\"\n---\n\n\n\n\n\n\n## Load libraries\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsuppressPackageStartupMessages({\n  library(tidyverse)\n  library(randomForest)\n  library(terra)\n  library(caret)\n  library(patchwork)\n  library(sf)\n})\n```\n:::\n\n\n\n\n\n\n## Load data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n attribute <- c(\"plan_curvature\", \"profile_curvature\", \"saga_wetness_index\", \"catchment_area\", \"relative_slope_position\", \"channel_network_distance\", \"elevation\")\n\ndata <- read_csv(here::here(\"./notebooks/forest_terrain_data.csv\"), show_col_types = FALSE) %>%\n  select(\"x\", \"y\", \"li\", any_of(attribute))\n```\n:::\n\n\n\n\n\n\n## Map soil property\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntemp_rast <- rast(data)\ncrs(x = temp_rast, warn=FALSE) <- \"epsg:26914\"\n\ncoords <- read_csv(here::here(\"./notebooks/coords.csv\"), show_col_types = FALSE) %>% \n  st_as_sf(coords = c(\"long\", \"lat\"),  crs = 4326) %>%\n  st_transform(crs = 26914)\n\np1<- ggplot() +\n  tidyterra::geom_spatraster(data = temp_rast, aes(fill = li)) +\n  scale_fill_viridis_c(name = \"Li\", breaks = seq(4, 9, 1)) +\n  geom_sf(data = filter(coords, site == \"Forest\")) +\n  theme_bw(base_size = 12) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"bottom\") +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_x_continuous(expand = c(0,0)) +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"br\")\n\np2 <- ggplot() +\n  tidyterra::geom_spatraster(data = temp_rast, aes(fill = elevation)) +\n  scale_fill_viridis_c(name = \"Elevation (m)\", option = \"inferno\") +\n  geom_sf(data = filter(coords, site == \"Forest\")) +\n  theme_bw(base_size = 12) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"bottom\") +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_x_continuous(expand = c(0,0)) +\n  ggspatial::annotation_scale(location = \"bl\") +\n  ggspatial::annotation_north_arrow(location = \"br\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| fig-width: 12\n#| fig-asp: 0.5\np1+p2  \n```\n\n::: {.cell-output-display}\n![](Li_For_RF_files/figure-jats/unnamed-chunk-4-1.png)\n:::\n:::\n\n\n\n\n\n\n## Create training, validation and testing datasets\n\n60 % of the data in the training data set 20 % of the data in the validation data set 20 % of the data in the testing data set\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nset.seed(123) # makes it reproducible\n\ntemp2 <- data %>%\n  mutate(dataset = sample(c(\"train\", \"validation\", \"test\"), size = nrow(.), replace = TRUE, prob = c(0.6, 0.2, 0.2)))\n\ntrain <- temp2 %>% \n  filter(dataset == \"train\" | dataset == \"validation\") \n\nvalidation <- temp2 %>% \n  filter(dataset == \"validation\") %>%\n  select(-dataset)\n\ntest <- temp2 %>% \n  filter(dataset == \"test\") %>%\n  select(-dataset)\n```\n:::\n\n\n\n\n\n\n## Feature selection\nvifstep() calculates VIF for all variables, excludes the one with the highest VIF (if it is greater than the threshold), repeat the procedure until no variables with a VIF greater than th remains.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfeatures <- usdm::vifstep(rast(select(filter(train, dataset == \"train\"), -dataset, -li)), th = 8)\nfeatures\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNo variable from the 7 input variables has collinearity problem. \n\nThe linear correlation coefficients ranges between: \nmin correlation ( channel_network_distance ~ catchment_area ):  0.0163493 \nmax correlation ( elevation ~ relative_slope_position ):  0.6435028 \n\n---------- VIFs of the remained variables -------- \n                 Variables      VIF\n1           plan_curvature 1.063070\n2        profile_curvature 1.719859\n3       saga_wetness_index 1.797966\n4           catchment_area 1.561261\n5  relative_slope_position 2.953399\n6 channel_network_distance 2.787480\n7                elevation 2.634416\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Remove correlated features from the data sets\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntrain <- temp2 %>% \n  filter(dataset == \"train\" | dataset == \"validation\") %>%\n  usdm::exclude(features) %>%\n  select(-x, -y)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in usdm::exclude(., features): No variable to exclude!\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nvalidation <- temp2 %>% \n  filter(dataset == \"validation\") %>%\n  select(-dataset) %>%\n  usdm::exclude(features) %>%\n  select(-x, -y)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in usdm::exclude(., features): No variable to exclude!\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ntest <- temp2 %>% \n  filter(dataset == \"test\") %>%\n  select(-dataset) %>%\n  usdm::exclude(features) %>%\n  select(-x, -y)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in usdm::exclude(., features): No variable to exclude!\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Tune the training RF model using the validation dataset\n\nInstructions (https://stackoverflow.com/questions/18155482/how-to-specify-a-validation-holdout-set-to-caret) \nThis uses the caret package and I included the validation set inside my training set and just define the resampling measures to only use the validation data. This step is to optimize the mtry parameter\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntc <- trainControl(method = \"cv\", number = 1, index = list(Fold1 = which(train$dataset == \"train\")), savePredictions = T)\n\nset.seed(456)\nvalidate.rf <- train(li ~ ., data = select(train, -dataset), method = \"rf\", trControl = tc)\nplot(validate.rf)\n```\n\n::: {.cell-output-display}\n![](Li_For_RF_files/figure-jats/unnamed-chunk-8-1.png)\n:::\n\n```{.r .cell-code .hidden}\nmy_mtry <- validate.rf$finalModel$mtry\nmy_mtry\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Validation back test\n\nUses the validation dataset as the test\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nset.seed(789)\n\nrf.fit <- randomForest(li ~ ., data = select(filter(train, dataset == \"train\"), -dataset), \n                       ntree = 500, keep.forest = TRUE, importance = TRUE, mtry = my_mtry,\n                       ytest = select(filter(train, dataset == \"validation\"), -dataset)$li,\n                       xtest = dplyr::select(select(filter(train, dataset == \"validation\"), -dataset), -li))\nrf.fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\n randomForest(formula = li ~ ., data = select(filter(train, dataset ==      \"train\"), -dataset), ntree = 500, keep.forest = TRUE, importance = TRUE,      mtry = my_mtry, ytest = select(filter(train, dataset == \"validation\"),          -dataset)$li, xtest = dplyr::select(select(filter(train,          dataset == \"validation\"), -dataset), -li)) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 7\n\n          Mean of squared residuals: 0.2779292\n                    % Var explained: 41.29\n                       Test set MSE: 0.28\n                    % Var explained: 41.95\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\noob_val <- sqrt(rf.fit$mse)\ntest_val <- sqrt(rf.fit$test$mse)\n\nval_plot <- tibble(`Out of Bag Error` = oob_val,\n                   Validation = test_val,\n                   ntrees = 1:rf.fit$ntree) %>%\n  pivot_longer(cols = -ntrees, names_to = \"Metric\", values_to = \"RMSE\" )\n\nggplot(data = val_plot, aes(ntrees, RMSE, color = Metric)) +\n  geom_line() +\n  theme_bw() +\n  xlab(\"Number of trees\")\n```\n\n::: {.cell-output-display}\n![](Li_For_RF_files/figure-jats/unnamed-chunk-10-1.png)\n:::\n:::\n\n\n\n\n\n\n## Testing the RF model\n\nUses the RF model to predict the test dataset. We compare predicted against actual\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprediction <- predict(rf.fit, newdata = test)\ntest_plot <- data.frame(pred = prediction, obs = test$li)\n\nr_sq <- summary(lm(pred~obs, data = test_plot))\nr_sq\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = pred ~ obs, data = test_plot)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.08150 -0.17703 -0.00843  0.17810  1.13142 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.91290    0.09236   42.37   <2e-16 ***\nobs          0.38697    0.01422   27.21   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2999 on 882 degrees of freedom\nMultiple R-squared:  0.4563,\tAdjusted R-squared:  0.4557 \nF-statistic: 740.3 on 1 and 882 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nggplot(data = test_plot, aes(y = pred, x = obs)) +\n  geom_point() +\n  ggpmisc::stat_poly_line() +\n  ggpmisc::stat_poly_eq() +\n  theme_bw() +\n  geom_abline(slope = 1, intercept = 0) +\n  coord_fixed(ratio = 1)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Li_For_RF_files/figure-jats/unnamed-chunk-11-1.png)\n:::\n:::\n\n\n\n\n\n\n## Importance\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nImpData <- as.data.frame(importance(rf.fit)) %>%\n  mutate(Var.Names = row.names(.)) %>%\n `row.names<-`(as.character(1:nrow(importance(rf.fit))))\n```\n:::\n\n\n\n\n\n### Top based on IncNodePurity\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nslice_max(ImpData,order_by = IncNodePurity, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    %IncMSE IncNodePurity                Var.Names\n7 135.21234      431.7042                elevation\n5  89.85247      197.0463  relative_slope_position\n6  51.76305      168.6657 channel_network_distance\n3  45.28056      131.4342       saga_wetness_index\n4  21.10736      107.2431           catchment_area\n2  24.72114      102.5091        profile_curvature\n1  16.04247      101.1574           plan_curvature\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\np1 <- ggplot(slice_max(ImpData,order_by = IncNodePurity, n = 10), aes(x = fct_reorder(Var.Names, IncNodePurity), y = IncNodePurity)) +\n  geom_segment(aes(x = fct_reorder(Var.Names, IncNodePurity), xend = fct_reorder(Var.Names, IncNodePurity), y = 0, yend = IncNodePurity), color=\"skyblue\") +\n  geom_point(aes(size = `%IncMSE`), color = \"blue\", alpha = 0.6) +\n  theme_bw() +\n  coord_flip() +\n  labs(x = \"Terrain Attribute\") +\n  theme(legend.position=\"bottom\")\n```\n:::\n\n\n\n\n\n\n### Top 10 based on %IncMSE\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nslice_max(ImpData,order_by = `%IncMSE`, n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    %IncMSE IncNodePurity                Var.Names\n7 135.21234      431.7042                elevation\n5  89.85247      197.0463  relative_slope_position\n6  51.76305      168.6657 channel_network_distance\n3  45.28056      131.4342       saga_wetness_index\n2  24.72114      102.5091        profile_curvature\n4  21.10736      107.2431           catchment_area\n1  16.04247      101.1574           plan_curvature\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\np2<- ggplot(slice_max(ImpData,order_by = `%IncMSE`, n = 10), aes(x = fct_reorder(Var.Names, `%IncMSE`), y = `%IncMSE`)) +\n  geom_segment(aes(x = fct_reorder(Var.Names, `%IncMSE`), xend = fct_reorder(Var.Names, `%IncMSE`), y = 0, yend = `%IncMSE`), color=\"skyblue\") +\n  geom_point(aes(size = IncNodePurity), color = \"blue\", alpha = 0.6) +\n  theme_bw() +\n  coord_flip() +\n  labs(x = \"Terrain Attribute\") +\n  theme(legend.position=\"bottom\")\n```\n:::\n\n\n\n\n\n\n### Combined\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| label: test\n#| fig-cap: Forest Li \np1+p2\n```\n\n::: {.cell-output-display}\n![Forest Li](Li_For_RF_files/figure-jats/test-1.png)\n:::\n:::\n\n\n\n\n\n\n### Write data\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nimportance_data <- ImpData %>%\n  mutate(MSE_rank = rank(-`%IncMSE`)) %>%\n  mutate(Purity_rank = rank(-IncNodePurity)) %>%\n  mutate(site = \"Forest\",\n        property = \"Li\")\n\nif(file.exists(here::here(\"./notebooks/importance_data.csv\"))) {\n  importance_data_final <- read_csv(here::here(\"./notebooks/importance_data.csv\")) |>\n    rows_upsert(importance_data, by = c(\"MSE_rank\", \"site\", \"property\")) \n} else importance_data_final <- importance_data\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 175 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Var.Names, site, property\ndbl (4): %IncMSE, IncNodePurity, MSE_rank, Purity_rank\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nwrite_csv(importance_data_final, here::here(\"./notebooks/importance_data.csv\"))\n\n\nmodel_performance <- tibble(MSE = rf.fit$mse[length(rf.fit$mse)],\n       Var_exp = rf.fit$rsq[length(rf.fit$rsq)],\n       MSE_test = rf.fit$test$mse[length(rf.fit$test$mse)],\n       Var_exp_test = rf.fit$test$rsq[length(rf.fit$test$rsq)],\n       R2 = r_sq$r.squared, \n       site = \"Forest\",\n       property = \"Li\")\n\nif(file.exists(here::here(\"./notebooks/model_performance_data.csv\"))) {\n  model_performance_final <- read_csv(here::here(\"./notebooks/model_performance_data.csv\")) |>\n        rows_upsert(model_performance, by = c(\"site\", \"property\"))  \n} else model_performance_final <- model_performance\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 25 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): site, property\ndbl (5): MSE, Var_exp, MSE_test, Var_exp_test, R2\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nwrite_csv(model_performance_final, here::here(\"./notebooks/model_performance_data.csv\"))\n```\n:::\n",
    "supporting": [
      "Li_For_RF_files/figure-jats"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}