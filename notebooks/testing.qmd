---
title: "Testing"
author: "Alex Koiter"
---

## Load libraries
```{r}
suppressPackageStartupMessages({
  library(tidyverse)
  library(randomForest)
  library(terra)
  library(caret)
  library(patchwork)
  library(sf)
})
```

## Load data
```{r}
 attribute <- c("plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation")

all_data <- read_csv(here::here("./notebooks/ag_terrain_data.csv"), show_col_types = FALSE) %>%
  select("x", "y", "a_c", any_of(attribute)) %>% 
  rename("long" = "x", "lat" = "y") %>%
  st_as_sf(coords = c("long", "lat"),  crs = 32614) %>%
  st_transform(crs = 26914)

coords <- read_csv(here::here("./notebooks/coords.csv"), show_col_types = FALSE) %>% 
  filter(site == "Agriculture") %>%
  st_as_sf(coords = c("long", "lat"),  crs = 4326) %>%
  st_transform(crs = 26914)


data <- st_join(coords, all_data, st_nearest_feature) %>%
  select(-site) %>%
  st_drop_geometry()

```
## Create training, validation and testing datasets

60 % of the data in the training data set 20 % of the data in the validation data set 20 % of the data in the testing data set

```{r}
set.seed(123) # makes it reproducible

temp2 <- data %>%
  mutate(dataset = sample(c("train", "test"), size = nrow(.), replace = TRUE, prob = c(0.6, 0.4)))

train <- temp2 %>% 
  filter(dataset == "train") 

test <- temp2 %>% 
  filter(dataset == "test") %>%
  select(-dataset)
```


## Tune the training RF model

```{r}
set.seed(456)
validate.rf <- train(a_c ~ ., data = select(train, -dataset), method = "rf")
plot(validate.rf)

my_mtry <- validate.rf$finalModel$mtry
my_mtry
```

## Train Model

```{r}
set.seed(789)

rf.fit <- randomForest(a_c ~ ., data = select(filter(train, dataset == "train"), -dataset), 
                       ntree = 500, keep.forest = TRUE, importance = TRUE, mtry = my_mtry,
                       ytest = test$a_c,
                       xtest = dplyr::select(test, -a_c))
rf.fit

```

```{r}
oob_val <- sqrt(rf.fit$mse)
test_val <- sqrt(rf.fit$test$mse)

val_plot <- tibble(`Out of Bag Error` = oob_val,
                   Test = test_val,
                   ntrees = 1:rf.fit$ntree) %>%
  pivot_longer(cols = -ntrees, names_to = "Metric", values_to = "RMSE" )

ggplot(data = val_plot, aes(ntrees, RMSE, color = Metric)) +
  geom_line() +
  theme_bw() +
  xlab("Number of trees")
```

## Testing the RF model

Uses the RF model to predict the test dataset. We compare predicted against actual
```{r}
prediction <- predict(rf.fit, newdata = test)
test_plot <- data.frame(pred = prediction, obs = test$a_c)

r_sq <- summary(lm(pred~obs, data = test_plot))
r_sq

ggplot(data = test_plot, aes(y = pred, x = obs)) +
  geom_point() +
  ggpmisc::stat_poly_line() +
  ggpmisc::stat_poly_eq() +
  theme_bw() +
  geom_abline(slope = 1, intercept = 0) +
  coord_fixed(ratio = 1)
```

## Importance
```{r}
ImpData <- as.data.frame(importance(rf.fit)) %>%
  mutate(Var.Names = row.names(.)) %>%
 `row.names<-`(as.character(1:nrow(importance(rf.fit))))
```
### Top based on IncNodePurity
```{r}
slice_max(ImpData,order_by = IncNodePurity, n = 10)
```

```{r}
p1 <- ggplot(slice_max(ImpData,order_by = IncNodePurity, n = 10), aes(x = fct_reorder(Var.Names, IncNodePurity), y = IncNodePurity)) +
  geom_segment(aes(x = fct_reorder(Var.Names, IncNodePurity), xend = fct_reorder(Var.Names, IncNodePurity), y = 0, yend = IncNodePurity), color="skyblue") +
  geom_point(aes(size = `%IncMSE`), color = "blue", alpha = 0.6) +
  theme_bw() +
  coord_flip() +
  labs(x = "Terrain Attribute") +
  theme(legend.position="bottom")
```

### Top 10 based on %IncMSE
```{r}
slice_max(ImpData,order_by = `%IncMSE`, n = 10)
```

```{r}
p2<- ggplot(slice_max(ImpData,order_by = `%IncMSE`, n = 10), aes(x = fct_reorder(Var.Names, `%IncMSE`), y = `%IncMSE`)) +
  geom_segment(aes(x = fct_reorder(Var.Names, `%IncMSE`), xend = fct_reorder(Var.Names, `%IncMSE`), y = 0, yend = `%IncMSE`), color="skyblue") +
  geom_point(aes(size = IncNodePurity), color = "blue", alpha = 0.6) +
  theme_bw() +
  coord_flip() +
  labs(x = "Terrain Attribute") +
  theme(legend.position="bottom")
```

### Combined

```{r}
p1+p2
```