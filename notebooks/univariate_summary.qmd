---
title: "Univariate summary"
author: "Alex Koiter"
html-table-processing: none
---

## Load libraries
```{r}
library(tidyverse)
library(gt)
library(sf)
library(terra)
```

# load in data
```{r}
data <- read_csv(here::here("./notebooks/soil_data.csv"))
```
## Summarize
```{r}
data_summary <- data %>%
  group_by(element) %>%
  group_by(element, site, group) %>%
  summarise(mean = mean(value, na.rm = T),
            sd = sd(value, na.rm = T),
            max = max(value, na.rm = T),
            min = min(value, na.rm = T),
            se = sd(value)/ sqrt(length(value)),
            skewness = moments::skewness(value),
            cv = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE) * 100, .groups = "drop") 
```

```{r}

data_summary |>
  filter(group %in% c("geochem", "colour"))|>
  group_by(site) |>
  summarise(skew_small = sum(skewness <=0.5 & skewness >=-0.5),
            skew_moderate = sum(skewness > 0.5 & skewness <1| skewness < -0.5 & skewness > -1),
            skew_large = sum(skewness >= 1 | skewness <= -1),
            pos_skew = sum(skewness > 0),
            neg_skew = sum(skewness < 0),
            CV_low = sum(cv <15),
            CV_mod = sum(cv >= 15 & cv < 35),
            CV_high = sum(cv >= 35 & cv <= 75),
            CV_v_high = sum(cv > 75),
            n = n())

data_summary |>
  filter(group %in% c("geochem", "colour")) |>
  group_by(site, group) |>
  summarise(skew_small = sum(skewness <=0.5 & skewness >=-0.5),
            skew_moderate = sum(skewness > 0.5 & skewness <1| skewness < -0.5 & skewness > -1),
            skew_large = sum(skewness >= 1 | skewness <= -1),
            pos_skew = sum(skewness > 0),
            neg_skew = sum(skewness < 0),
            CV_low = sum(cv <15),
            CV_mod = sum(cv >= 15 & cv < 35),
            CV_high = sum(cv >= 35 & cv <= 75),
            CV_v_high = sum(cv > 75),
            n = n())

data_summary |>
  filter(skewness >= 1 | skewness <= -1) |>
  filter(group %in% c("geochem", "colour")) |>
  group_by(site, group) |>
  summarise(pos_skew = sum(skewness > 0),
            neg_skew = sum(skewness < 0),
            CV_low = sum(cv <15),
            CV_mod = sum(cv >= 15 & cv < 35),
            CV_high = sum(cv >= 35 & cv <= 75),
            CV_v_high = sum(cv > 75),
            n = n())
```


### Max-min scaling
```{r}
data2 <- data %>%
  group_by(element) %>%
  mutate(value2 = (value - min(value, na.rm = T)) / (max(value, na.rm = T) - min(value, na.rm = T))) %>%
  group_by(element, site, group) %>%
  summarise(mean = mean(value2, na.rm = T),
            sd = sd(value2, na.rm = T),
            max = max(value2, na.rm = T),
            min = min(value2, na.rm = T),
            se = sd(value2)/ sqrt(length(value2)),
            skewness = moments::skewness(value2),
            cv = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE) * 100, .groups = "drop") %>%
  mutate(spacer = case_when(site == "Forest" ~ 1.1,
                            site == "Agriculture"~ 1.2))
```
## Geochemistry
### plot prep
```{r}
geo <- data2 %>%
  filter(group == "geochem") %>%
  mutate(facet = case_when(element %in% c("Ag", "Al", "As","B","Ba","Be","Bi","Ca","Cd","Ce","Co", "Cr", "Cs", "Cu", "Fe", "Ga", "Hf", "Hg", "In", "K", "La", "Li") ~ "Geomchemistry A-L",
                          element %in% c("Mg", "Mn", "Mo", "Nb", "Ni", "P", "Pb", "Rb", "S", "Sb", "Sc", "Se", "Sn", "Sr", "Te", "Th", "Tl", "U", "V", "Y", "Zn", "Zr") ~ "Geomchemistry M-Z",
                          TRUE~ NA)) %>%
  mutate(bar = rep(c(rep(Inf, 2), rep(0, 2)), n()/4)) %>%
  pivot_longer(cols = c(mean, max, min), names_to = "variable") 

geo2 <- data2 %>%
  filter(group == "geochem") %>%
    mutate(facet = case_when(element %in% c("Ag", "Al", "As","B","Ba","Be","Bi","Ca","Cd","Ce","Co", "Cr", "Cs", "Cu", "Fe", "Ga", "Hf", "Hg", "In", "K", "La", "Li") ~ "Geomchemistry A-L",
                          element %in% c("Mg", "Mn", "Mo", "Nb", "Ni", "P", "Pb", "Rb", "S", "Sb", "Sc", "Se", "Sn", "Sr", "Te", "Th", "Tl", "U", "V", "Y", "Zn", "Zr") ~ "Geomchemistry M-Z",
                          TRUE~ NA)) %>%
  mutate(bar = rep(c(rep(Inf, 2), rep(0, 2)), n()/4))

geo3 <- data2 %>%
  filter(group == "geochem") %>%
    mutate(facet = case_when(element %in% c("Ag", "Al", "As","B","Ba","Be","Bi","Ca","Cd","Ce","Co", "Cr", "Cs", "Cu", "Fe", "Ga", "Hf", "Hg", "In", "K", "La", "Li") ~ "Geomchemistry A-L",
                          element %in% c("Mg", "Mn", "Mo", "Nb", "Ni", "P", "Pb", "Rb", "S", "Sb", "Sc", "Se", "Sn", "Sr", "Te", "Th", "Tl", "U", "V", "Y", "Zn", "Zr") ~ "Geomchemistry M-Z",
                          TRUE~ NA)) %>%
  mutate(bar = rep(c(rep(-Inf, 2), rep(0, 2)), n()/4))

```  

### plot
```{r}
#| label: suppfig-geo_summary
#| fig-cap: Summary statistics of all measured geochemical soil properties at both sites. Error bars represent 1SD and the numeric values inidicate the CV.
 
p1 <- ggplot() +
  theme_bw(base_size = 12) +
  geom_bar(data = geo2, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_bar(data = geo3, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_errorbar(data = geo2, aes(x = element, ymin = mean - sd, ymax = mean + sd, colour = site), width = .1, position = position_dodge(width = 0.5)) +
  geom_point(data = filter(geo, variable == "mean"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 1.5) +
  geom_point(data = filter(geo, variable == "max"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 1.5) +
  geom_point(data = filter(geo, variable == "min"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 1.5) +
  geom_text(data = geo3, aes(x = element, y = spacer, colour = site, label = formatC(cv, digits = 1, format = "f")), show.legend = FALSE, size = 3) +
  guides(color=guide_legend(override.aes=list(shape=NA))) +
  scale_shape_manual(values=c(3, 19, 4)) +
  scale_color_viridis_d(begin = 0.2, end = 0.7) +
  scale_y_continuous(breaks = seq(0, 1, 0.2)) +
  theme(legend.position = "bottom",
        legend.title = element_blank()) +
  labs(y = "Scaled Concentration", x = "Element") +
  facet_wrap(~facet, ncol = 1, scales = "free_x")
p1
#ggsave(plot = p1, filename = here::here("./images/geo_summary.png"))
```


## Plot2
```{r}
#| fig-width: 7
#| fig-height: 20
ggplot(data = filter(data, group == "geochem"), aes(x = site, y = value, fill = site))+
  geom_boxplot() +
  theme_bw(base_size = 12) +
  scale_fill_viridis_d(begin = 0.2, end = 0.7) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  labs(x = "Site", y = "Concentration") +
  facet_wrap(~element, scales = "free_y", ncol = 4)
```

### Table
```{r}
geo_tab <- data_summary %>%
  filter(group == "geochem") %>%
  select(-group) 

knitr::kable(geo_tab, digits = 3)
```
## Colour
### plot prep
```{r}
colour <- data2 %>%
  filter(group == "colour") %>%
  mutate(element = str_extract(element, ("[:alpha:](?=_)"))) %>% # remove _col
  mutate(bar = c(rep(c(rep(Inf, 2), rep(0, 2)), 7), Inf, Inf)) %>%
  pivot_longer(cols = c(mean, max, min), names_to = "variable") 

colour2 <- data2 %>%
  filter(group == "colour") %>%
  mutate(element = str_extract(element, ("[:alpha:](?=_)"))) %>% # remove _col
  mutate(bar = c(rep(c(rep(Inf, 2), rep(0, 2)), 7), Inf, Inf))

colour3 <- data2 %>%
  filter(group == "colour") %>%
  mutate(element = str_extract(element, ("[:alpha:](?=_)"))) %>% # remove _col
  mutate(bar = c(rep(c(rep(-Inf, 2), rep(0, 2)), 7), -Inf, -Inf))

```  

### plot
```{r}
#| label: suppfig-colour_summary
#| fig-cap: Summary statistics of all measured geochemical soil properties at both sites. Error bars represent 1SD and the numeric values inidicate the CV.

p2 <- ggplot() +
  theme_bw(base_size = 12) +
  geom_bar(data = colour2, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_bar(data = colour3, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_errorbar(data = colour2, aes(x = element, ymin = mean - sd, ymax = mean + sd, colour = site), width = .1, position = position_dodge(width = 0.5)) +
  geom_point(data = filter(colour, variable == "mean"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_point(data = filter(colour, variable == "max"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_point(data = filter(colour, variable == "min"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_text(data = colour3, aes(x = element, y = spacer, colour = site, label = formatC(cv, digits = 1, format = "f")), show.legend = FALSE, size = 4) +
  guides(color=guide_legend(override.aes=list(shape=NA))) +
  scale_shape_manual(values=c(3, 19, 4)) +
  scale_color_viridis_d(begin = 0.2, end = 0.7) +
  scale_y_continuous(breaks = seq(0, 1, 0.2)) +
  theme(legend.position = "bottom",
        legend.title = element_blank()) +
  labs(y = "Scaled value", x = "Colour coefficient") 
p2
#ggsave(plot = p2, filename = here::here("./images/colour_summary.png"))
```

### Plot2
```{r}
ggplot(data = filter(data, group == "colour"), aes(x = site, y = value, fill = site))+
  geom_boxplot() +
  theme_bw(base_size = 12) +
  scale_fill_viridis_d(begin = 0.2, end = 0.7) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  labs(x = "Site", y = "Value") +
  facet_wrap(~element, scales = "free_y")
```

### Table
```{r}
colour_tab <- data_summary %>%
  filter(group == "colour") %>%
  mutate(element = str_extract(element, ("[:alpha:](?=_)"))) %>% # remove _col
  select(-group) 

knitr::kable(colour_tab, digits = 3)
```

## PSA and organic matter
### plot prep
```{r}
psa <- data2 %>%
  filter(group %in% c("psa", "organic")) %>%
  mutate(bar = c(rep(c(rep(Inf, 2), rep(0, 2)), 1), Inf, Inf)) %>%
  pivot_longer(cols = c(mean, max, min), names_to = "variable") 

psa2 <- data2 %>%
  filter(group %in% c("psa", "organic")) %>%
  mutate(bar = c(rep(c(rep(Inf, 2), rep(0, 2)), 1), Inf, Inf)) 

psa3 <- data2 %>%
  filter(group %in% c("psa", "organic")) %>%
  mutate(bar = c(rep(c(rep(-Inf, 2), rep(0, 2)), 1), -Inf, -Inf))

```  

### plot
```{r}
ggplot() +
  theme_bw(base_size = 12) +
  geom_bar(data = psa2, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_bar(data = psa3, aes(x=element, y = bar), fill ="grey20", position="identity", stat = "identity", alpha = 0.1) +
  geom_errorbar(data = psa2, aes(x = element, ymin = mean - sd, ymax = mean + sd, colour = site), width = .2, position = position_dodge(width = 0.5)) +
  geom_point(data = filter(psa, variable == "mean"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_point(data = filter(psa, variable == "max"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_point(data = filter(psa, variable == "min"), aes(x = element, y = value, colour = site, shape = variable), position = position_dodge(width = 0.5), show.legend = TRUE, size = 2) +
  geom_text(data = psa3, aes(x = element, y = spacer, colour = site, label = formatC(cv, digits = 1, format = "f")), show.legend = FALSE, size = 5) +
  guides(color=guide_legend(override.aes=list(shape=NA))) +
  scale_shape_manual(values=c(3, 19, 4)) +
  scale_color_viridis_d(begin = 0.2, end = 0.7) +
  scale_y_continuous(breaks = seq(0, 1, 0.2)) +
  theme(legend.position = "bottom",
        legend.title = element_blank()) +
  labs(y = "Scaled value", x = "Soil property") 
```


## Plot2
```{r}
ggplot(data = filter(data, group %in% c("psa", "organic")), aes(x = site, y = value, fill = site))+
  geom_boxplot() +
  theme_bw(base_size = 12) +
  scale_fill_viridis_d(begin = 0.2, end = 0.7) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  labs(x = "Site", y = "Value") +
  facet_wrap(~element, scales = "free_y")
```

### Table
```{r}
psa_tab <- data_summary %>%
  filter(group %in% c("psa", "organic")) %>%
  select(-group) 

knitr::kable(psa_tab, digits = 3)
```

```{r}
summary_tab <- data_summary %>%
  filter(element %in% c("Li", "a_col", "Fe", "Co", "x_col", "Cs", "La", "Ni", "Nb", "h_col", "b_col", "Rb", "Ca", "Sr", "c_col")) %>%
   mutate(element = as.character(fct_recode(element, "a*" = "a_col", "b*" = "b_col", "c*" = "c_col", "h*" = "h_col", "x" = "x_col"))) %>%
  rename("Property" = "element", "Mean" = "mean", "SD" = "sd", "Max" = "max", "Min" = "min", "Skewness" = "skewness", "CV" = "cv") %>%
   mutate(Property = fct_relevel(Property, "Ca", "Co", "Cs", "Fe", "Li", "La", "Nb", "Ni", "Rb", "Sr", "a*", "b*", "c*", "h*", "x")) %>%
  arrange(Property) |>
  mutate(Property = as.character(Property))
```

```{r}
#| label: tbl-univariate-summary
#| tbl-cap: Summary univariate statistics of selected geochemical and colour soil properties for each site (n = 49).

summary_tab |>
  group_by(site) |>
  select(-group, -se) |>
  gt() |>
  #fmt_markdown(columns = Element)|>
  fmt_number(decimals = 2) |>
  #cols_align(align = "left") |>
  tab_style(style =  cell_text(weight = "bold", align = "center"), locations =  cells_row_groups()) |>
  tab_options(column_labels.font.weight = "bold") |>
tab_style(
    style = list(cell_text(style = "italic")),
    locations = cells_body(
      columns = Property,
      rows = Property %in% c("a*", "b*", "c*", "h*", "x")))
```

```{r}
summary_tab |>
  group_by(site) |>
  summarise(skew_small = sum(Skewness <=0.5 & Skewness >=-0.5),
            skew_large = sum(Skewness > 0.5 | Skewness < -0.5),
            pos_skew = sum(Skewness > 0),
            neg_skew = sum(Skewness < 0),
            CV_low = sum(CV <15),
            CV_mod = sum(CV >= 15 & CV < 35),
            CV_high = sum(CV >= 35 & CV <= 75),
            CV_v_high = sum(CV > 75))
```



```{r}
forest_data <- read_csv(here::here("./notebooks/forest_terrain_data.csv"), show_col_types = FALSE) %>%
  pivot_longer(cols = li:elevation, names_to = "property", values_to = "value") %>%
  group_by(property) %>%
  summarise(Mean = mean(value, na.rm = T),
            SD = sd(value, na.rm = T),
            Max = max(value, na.rm = T),
            Min = min(value, na.rm = T),
            #Se = sd(value)/ sqrt(length(value)),
            Skewness = moments::skewness(value, na.rm = TRUE),
            CV = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE) * 100, .groups = "drop") %>%
  mutate(site = "Forest")

ag_data <- read_csv(here::here("./notebooks/ag_terrain_data.csv"), show_col_types = FALSE) %>%
  pivot_longer(cols = li:elevation, names_to = "property", values_to = "value") %>%
  group_by(property) %>%
  summarise(Mean = mean(value, na.rm = T),
            SD = sd(value, na.rm = T),
            Max = max(value, na.rm = T),
            Min = min(value, na.rm = T),
            #Se = sd(value)/ sqrt(length(value)),
            Skewness = moments::skewness(value, na.rm = TRUE),
            CV = sd(value, na.rm = TRUE) / mean(value, na.rm = TRUE) * 100, .groups = "drop") %>%
  mutate(site = "Agriculture")

terrain_summary <- forest_data %>%
  bind_rows(ag_data) %>%
  mutate(property = fct_relevel(property, c("ca", "co", "cs", "fe", "li", "la", "nb", "ni", "rb", "sr", "a_c", "b_c", "c_c", "h_c", "x_c", "plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation"))) %>%
  arrange(property, site) %>%
  mutate(property = as.character(fct_recode(property, "h*" = "h_c", "a*" = "a_c", "c*" = "c_c", "b*" = "b_c", "x" = "x_c", "Ca" = "ca", "Co" = "co", "Cs" = "cs", "Fe" = "fe", "Li" = "li", "La" = "la", "Nb" = "nb", "Rb" = "rb", "Ni" = "ni", "Sr" = "sr", "Elevation" = "elevation", "Catchment Area" = "catchment_area", "Plan Curvature" = "plan_curvature", "Profile Curvature" = "profile_curvature", "Rel. Slope Position" = "relative_slope_position", "SAGA Wetness Index" = "saga_wetness_index", "Vert. Dist. Channel" = "channel_network_distance")))
  
```

```{r}
#| label: tbl-univariate2-summary
#| tbl-cap: Summary statistics for the interpoloated values (10m resolution) for slected geochemical and colour soil properties and terrain attributes for each site.

terrain_summary |>
  rename("Property" = "property") |>
  group_by(site) |>
  gt() |>
  #fmt_markdown(columns = Property)|>
  fmt_number(n_sigfig = 3) |>
  fmt_scientific(rows = Property %in% c("Plan Curvature", "Profile Curvature", "Vert. Dist. Channel")) |>
  #fmt_number(row = everything() > 100, decimal = 0) |>
  #cols_align(align = "left") |>
  tab_style(style =  cell_text(weight = "bold", align = "center"), locations =  cells_row_groups()) |>
  tab_options(column_labels.font.weight = "bold") |>
tab_style(
    style = list(cell_text(style = "italic")),
    locations = cells_body(
      columns = Property,
      rows = Property %in% c("a*", "b*", "c*", "h*", "x")))
```


```{r}
data_summary |>
  filter(group %in% c("geochem", "colour")) |>
  rename("property" = "element") |>
  filter(property %in% c("Ca", "Co", "Cs", "Fe", "Li", "La", "Nb", "Ni", "Rb", "Sr", "a_col", "b_col", "c_col", "h_col", "x_col"))|>
  mutate(property = as.character(fct_recode(property, "h*" = "h_col", "a*" = "a_col", "c*" = "c_col", "b*" = "b_col", "x" = "x_col"))) |>
  left_join(terrain_summary, by = join_by(property, site)) |>
  #drop_na() |>
  mutate(Mean = paste0(sprintf("%.2f", mean), " (", sprintf("%.2f", Mean), ")"),
         SD = paste0(sprintf("%.2f", sd), " (", sprintf("%.2f", SD), ")"),
         Max = paste0(sprintf("%.2f", max), " (", sprintf("%.2f", Max), ")"),
         Min = paste0(sprintf("%.2f", min), " (", sprintf("%.2f", Min), ")"),
         Skewness = paste0(sprintf("%.2f", skewness), " (", sprintf("%.2f", Skewness), ")"),
         CV = paste0(sprintf("%.2f", cv), " (", sprintf("%.2f", CV), ")")) |>
  select(-group, -mean, -sd, -max, -min, -se, -skewness, -cv) |>
  rename("Property" = "property")  |>
  group_by(site) |>
  gt()|>
  tab_style(style =  cell_text(weight = "bold", align = "center"), locations =  cells_row_groups()) |>
  tab_options(column_labels.font.weight = "bold") |>
tab_style(
    style = list(cell_text(style = "italic")),
    locations = cells_body(
      columns = Property,
      rows = Property %in% c("a*", "b*", "c*", "h*", "x")))
```


## Correlations
### Forest
not used
```{r}
forest_corr_tab <- read_csv(here::here("./notebooks/forest_terrain_data.csv"), show_col_types = FALSE) %>% 
  select(-x, -y)

ag_corr_tab <- read_csv(here::here("./notebooks/ag_terrain_data.csv"), show_col_types = FALSE) %>% 
  select(-x, -y) 

forest_r <- as.data.frame(Hmisc::rcorr(as.matrix(forest_corr_tab))$r) %>%
  select("plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation") %>%
  rownames_to_column() %>%
  filter(rowname %in% c("ca", "co", "cs", "fe", "li", "la", "nb", "ni", "rb", "sr", "a_c", "b_c", "c_c", "h_c", "x_c")) %>%
  pivot_longer(cols = plan_curvature:elevation, names_to = "Terrain", values_to = "r")

forest_p <- as.data.frame(Hmisc::rcorr(as.matrix(forest_corr_tab))$P) %>%
  select("plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation") %>%
  rownames_to_column() %>%
  filter(rowname %in% c("ca", "co", "cs", "fe", "li", "la", "nb", "ni", "rb", "sr", "a_c", "b_c", "c_c", "h_c", "x_c")) %>%
  pivot_longer(cols = plan_curvature:elevation, names_to = "Terrain", values_to = "P")

temp3 <- forest_r %>%
  full_join(forest_p) %>%
  mutate(label = case_when(P < 0.05 & P >= 0.01 ~ paste0(round(r,2), "*"),
                           P < 0.01 & P >= 0.001 ~ paste0(round(r,2), "**"),
                           P < 0.001  ~ paste0(round(r,2), "***"),
                           P >= 0.05 ~ "NS")) %>%
  mutate(site = "Forest")


ag_r <- as.data.frame(Hmisc::rcorr(as.matrix(ag_corr_tab))$r) %>%
  select("plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation") %>%
  rownames_to_column() %>%
  filter(rowname %in% c("ca", "co", "cs", "fe", "li", "la", "nb", "ni", "rb", "sr", "a_c", "b_c", "c_c", "h_c", "x_c")) %>%
  pivot_longer(cols = plan_curvature:elevation, names_to = "Terrain", values_to = "r")

ag_p <- as.data.frame(Hmisc::rcorr(as.matrix(ag_corr_tab))$P) %>%
  select("plan_curvature", "profile_curvature", "saga_wetness_index", "catchment_area", "relative_slope_position", "channel_network_distance", "elevation") %>%
  rownames_to_column() %>%
  filter(rowname %in% c("ca", "co", "cs", "fe", "li", "la", "nb", "ni", "rb", "sr", "a_c", "b_c", "c_c", "h_c", "x_c")) %>%
  pivot_longer(cols = plan_curvature:elevation, names_to = "Terrain", values_to = "P")

temp4 <- ag_r %>%
  full_join(ag_p) %>%
  mutate(label = case_when(P < 0.05 & P >= 0.01 ~ paste0(round(r,2), "*"),
                           P < 0.01 & P >= 0.001 ~ paste0(round(r,2), "**"),
                           P < 0.001  ~ paste0(round(r,2), "***"),
                           P >= 0.05 ~ "NS")) %>%
  mutate(site = "Agriculture")


corr_tab <- temp3 %>%
  bind_rows(temp4) %>%
  pivot_wider(id_cols = c(rowname, site), names_from = "Terrain", values_from = "label") %>%
  select("site", "Property" = "rowname", "Elevation" = "elevation", "SAGA Wetness Index" = "saga_wetness_index", "Rel. Slope Position" = "relative_slope_position", "Vert. Dist. Channel" = "channel_network_distance", "Catchment Area" = "catchment_area", "Plan Curvature" = "plan_curvature", "Profile Curvature" = "profile_curvature") %>%
  mutate(Property = (fct_recode(Property, "*h**" = "h_c", "*a**" = "a_c", "*c**" = "c_c", "*b**" = "b_c", "*x*" = "x_c", "Ca" = "ca", "Co" = "co", "Cs" = "cs", "Fe" = "fe", "Li" = "li", "La" = "la", "Nb" = "nb", "Rb" = "rb", "Ni" = "ni", "Sr" = "sr"))) %>%
  mutate(Property = fct_relevel(Property, c("Ca", "Co", "Cs", "Fe", "Li", "La", "Nb", "Ni", "Rb", "Sr", "*a**", "*b**", "*c**", "*h**", "*x*"))) %>%
    arrange(Property) %>%
  mutate(Property = as.character(Property))
  
#write.csv(x = corr_tab, file = "correlation.csv", row.names = FALSE)
```

```{r}
#| label: supptab-correlation
#| tbl-cap: Pearson’s correlation coefficients for soil properties and terrain attributes using interpolated values (10m resolution).

correlation <- corr_tab |>
  group_by(site) |>
  gt() |>
  fmt_markdown(columns = Property) |>
    tab_style(style =  cell_text(weight = "bold", align = "center"), locations =  cells_row_groups()) |>
  tab_options(column_labels.font.weight = "bold") |>
    row_group_order(groups = c("Agriculture", "Forest"))|>
  tab_footnote(
    footnote = "*** p < 0.001; ** p < 0.01; * p < 0.05; NS = non-significant at p = 0.05"
  )

correlation

#saveRDS(correlation, file = here::here("./images/correlation.rds"))
```

